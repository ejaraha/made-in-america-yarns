max(as.integer(order_main_pivot$product_id))
order_main_pivot %>%
#mutate(product_id = (as.integer(product_id)) %>%
max(product_id)
order_main_pivot %>%
#mutate(product_id = (as.integer(product_id)) %>%
summarize(product_id, max)
help("summarise")
order_main_pivot %>%
#mutate(product_id = (as.integer(product_id)) %>%
group_by(product_id) %>%
summarize(max)
order_main_pivot %>%
#mutate(product_id = (as.integer(product_id)) %>%
group_by(product_id) %>%
summarize(product_id, max)
order_main_pivot %>%
#mutate(product_id = (as.integer(product_id)) %>%
group_by(product_id) %>%
summarize(max(product_id))
order_main_pivot %>%
#mutate(product_id = (as.integer(product_id)) %>%
summarize(max(product_id))
order_main_pivot %>%
#mutate(product_id = (as.integer(product_id)) %>%
filter(is.na(product_id)==FALSE) %>%
summarize(max(product_id))
order_main_pivot %>%
filter(is.na(product_id)==FALSE) %>%
mutate(product_id = as.integer(product_id))%>%
summarize(max(product_id))
order_main_pivot %>%
filter(is.na(product_id)==FALSE) %>%
mutate(product_id = as.integer(product_id))%>%
summarize(min(product_id))
order_main_pivot %>%
filter(is.na(product_id)==FALSE) %>%
#mutate(product_id = as.integer(product_id))%>%
summarize(min(product_id))
order_main_pivot %>%
filter(is.na(product_id)==FALSE) %>%
mutate(product_id = as.integer(product_id))%>%
summarize(max(product_id))
order_main_pivot %>%
filter(is.na(product_id)==FALSE) %>%
mutate(product_id = as.integer(product_id))%>%
summarize(max(product_id))  %>%
print()
order_main_pivot %>%
filter(is.na(product_id)==FALSE) %>%
mutate(product_id = as.integer(product_id))%>%
summarize(max(product_id))  %>%
as.integer()
source('C:/Users/sjara/git/made-in-america-yarns/functions.R', echo=TRUE)
n_new_product_id <- order_main_pivot %>%
filter(product_id == "0" & is.na(variation_id)==TRUE) %>%
nrow()
help("seq")
product_id_list <- seq(from = start_id, to = start_id + n_new_product_id, by=1)
n_new_product_id <- order_main_pivot %>%
filter(product_id == "0" & is.na(variation_id)==TRUE) %>%
nrow()
start_id <- order_main_pivot %>%
filter(is.na(product_id)==FALSE) %>%
mutate(product_id = as.integer(product_id))%>%
summarize(max(product_id))  %>%
as.integer()
product_id_list <- seq(from = start_id, to = start_id + n_new_product_id, by=1)
product_id_list
order_main_pivot %>%
filter(product_id == "0" & is.na(variation_id)==TRUE) %>%
count(name)
order_main_pivot %>%
filter(product_id == "0" & is.na(variation_id)==TRUE) %>%
distinct(name)
order_main_pivot %>%
filter(product_id == "0" & is.na(variation_id)==TRUE) %>%
distinct(name) %>%
nrow()
order_main_pivot <- df_list$order_main %>%
# gather all "line_item_" columns
pivot_longer(cols = starts_with("line_item"),
names_to = "item",
values_to = "item_description",
values_drop_na = TRUE) %>%
# extract product info from item_description
mutate("product_id" = str_extract(item_description, "(?<=product_id:)[:digit:]*"),
"variation_id" = str_extract(item_description, "(?<=variation_id:)[:digit:]*"),
"quantity" = str_extract(item_description, "(?<=quantity:)[:digit:]*(?=|total)"),
"name" = str_sub(str_trim(str_extract(item_description, "(?<=name:).*(?=product_id:)")),start=1, end=-2),
"color" = str_extract(item_description, "(?<=color:|colors:)[:alpha:]*[:space:]*[:alpha:]*[:space:]*[:alpha:]*")) %>%
separate(name, into = c("name", "detail"), sep = "-", extra="merge", fill="right") %>%
mutate_at(c("name", "detail"), str_trim)
# handle two scenarios of product_id == "0"
order_main_pivot <- order_main_pivot %>%
# [1] when there's a variation_id but no product_id:
## WooCommerce' mistake? the id listed as variation_id should actually be in the product_id column
## comparing against wcSmartManager plugin shows this
## for these instances, swap the contents of product_id and variation_id
mutate(product_id = case_when(product_id == "0" & is.na(variation_id) == FALSE ~ variation_id,
TRUE ~ as.character(product_id)),
variation_id = case_when(product_id == variation_id ~"0",
TRUE ~ as.character(variation_id))
)
# [2] when product_id == "0" & variation_id is.na
## these are products that have since been deleted
## these products will also be deleted from the database from this date on
filter(product_id != "0" & is.na(variation_id)==TRUE)
order_main_pivot <- df_list$order_main %>%
# gather all "line_item_" columns
pivot_longer(cols = starts_with("line_item"),
names_to = "item",
values_to = "item_description",
values_drop_na = TRUE) %>%
# extract product info from item_description
mutate("product_id" = str_extract(item_description, "(?<=product_id:)[:digit:]*"),
"variation_id" = str_extract(item_description, "(?<=variation_id:)[:digit:]*"),
"quantity" = str_extract(item_description, "(?<=quantity:)[:digit:]*(?=|total)"),
"name" = str_sub(str_trim(str_extract(item_description, "(?<=name:).*(?=product_id:)")),start=1, end=-2),
"color" = str_extract(item_description, "(?<=color:|colors:)[:alpha:]*[:space:]*[:alpha:]*[:space:]*[:alpha:]*")) %>%
separate(name, into = c("name", "detail"), sep = "-", extra="merge", fill="right") %>%
mutate_at(c("name", "detail"), str_trim)
# handle two scenarios of product_id == "0"
order_main_pivot <- order_main_pivot %>%
# [1] when there's a variation_id but no product_id:
## WooCommerce' mistake? the id listed as variation_id should actually be in the product_id column
## comparing against wcSmartManager plugin shows this
## for these instances, swap the contents of product_id and variation_id
mutate(product_id = case_when(product_id == "0" & is.na(variation_id) == FALSE ~ variation_id,
TRUE ~ as.character(product_id)),
variation_id = case_when(product_id == variation_id ~"0",
TRUE ~ as.character(variation_id))
) %>%
# [2] when product_id == "0" & variation_id is.na
## these are products that have since been deleted
## these products will also be deleted from the database from this date on
filter(product_id != "0" & is.na(variation_id)==TRUE)
data_norm$order_product <- order_main_pivot %>%
# # replace NAs with "0000"
# mutate(variation_id = case_when(is.na(variation_id)==TRUE ~ "0000",
#                                 TRUE ~ variation_id)) %>%
select(order_id,
product_id,
variation_id,
quantity)
# initialize list for normalized data frames
data_norm <- list()
data_norm$order_product <- order_main_pivot %>%
# # replace NAs with "0000"
# mutate(variation_id = case_when(is.na(variation_id)==TRUE ~ "0000",
#                                 TRUE ~ variation_id)) %>%
select(order_id,
product_id,
variation_id,
quantity)
#------------------
data_norm$order_product %>% filter(is.na(product_id)==TRUE)
data_norm$order_product %>% filter(is.na(variation_id)==TRUE) %>% glimpse()
data_norm$product <- order_main_pivot %>%
select(product_id,
variation_id,
name,
color)
data_norm$product %>% filter(is.na(variation_id)==TRUE) %>% glimpse()
data_norm$product %>% filter(is.na(variation_id)==TRUE) %>% distinct(name) %>%glimpse()
simple <- data_norm$product %>% filter(is.na(variation_id)==TRUE) %>% distinct(name) %>%glimpse()
View(simple)
order_main_pivot <- df_list$order_main %>%
# gather all "line_item_" columns
pivot_longer(cols = starts_with("line_item"),
names_to = "item",
values_to = "item_description",
values_drop_na = TRUE) %>%
# extract product info from item_description
mutate("product_id" = str_extract(item_description, "(?<=product_id:)[:digit:]*"),
"variation_id" = str_extract(item_description, "(?<=variation_id:)[:digit:]*"),
"quantity" = str_extract(item_description, "(?<=quantity:)[:digit:]*(?=|total)"),
"name" = str_sub(str_trim(str_extract(item_description, "(?<=name:).*(?=product_id:)")),start=1, end=-2),
"color" = str_extract(item_description, "(?<=color:|colors:)[:alpha:]*[:space:]*[:alpha:]*[:space:]*[:alpha:]*")) %>%
separate(name, into = c("name", "detail"), sep = "-", extra="merge", fill="right") %>%
mutate_at(c("name", "detail"), str_trim)
# handle three scenarios of product_id == "0" and/or variation_id == NA
order_main_pivot <- order_main_pivot %>%
# [1] when there's a variation_id but no product_id:
## WooCommerce' mistake? the id listed as variation_id should actually be in the product_id column
## comparing against wcSmartManager plugin shows this
## for these instances, swap the contents of product_id and variation_id
mutate(product_id = case_when(product_id == "0" & is.na(variation_id) == FALSE ~ variation_id,
TRUE ~ as.character(product_id)),
variation_id = case_when(product_id == variation_id ~"0",
TRUE ~ as.character(variation_id))
) %>%
# [2] when product_id == "0" & variation_id is.na
## these are products that have since been deleted
## these products will also be deleted from the database from this date on
filter(product_id != "0" & is.na(variation_id)==TRUE) %>%
# [3] for the remaining records, is.na(variation_id)=TRUE indicates a simple product
## all NAs in variation_id will be replaced with "0000" to explicitly indicate simple products
mutate(variation_id = case_when(is.na(variation_id)==TRUE ~ "0000",
TRUE ~ variation_id))
View(order_main_pivot)
order_main_pivot <- df_list$order_main %>%
# gather all "line_item_" columns
pivot_longer(cols = starts_with("line_item"),
names_to = "item",
values_to = "item_description",
values_drop_na = TRUE) %>%
# extract product info from item_description
mutate("product_id" = str_extract(item_description, "(?<=product_id:)[:digit:]*"),
"variation_id" = str_extract(item_description, "(?<=variation_id:)[:digit:]*"),
"quantity" = str_extract(item_description, "(?<=quantity:)[:digit:]*(?=|total)"),
"name" = str_sub(str_trim(str_extract(item_description, "(?<=name:).*(?=product_id:)")),start=1, end=-2),
"color" = str_extract(item_description, "(?<=color:|colors:)[:alpha:]*[:space:]*[:alpha:]*[:space:]*[:alpha:]*")) %>%
separate(name, into = c("name", "detail"), sep = "-", extra="merge", fill="right") %>%
mutate_at(c("name", "detail"), str_trim)
# handle three scenarios of product_id == "0" and/or variation_id == NA
order_main_pivot <- order_main_pivot %>%
# [1] when there's a variation_id but no product_id:
## WooCommerce' mistake? the id listed as variation_id should actually be in the product_id column
## comparing against wcSmartManager plugin shows this
## for these instances, swap the contents of product_id and variation_id
mutate(product_id = case_when(product_id == "0" & is.na(variation_id) == FALSE ~ variation_id,
TRUE ~ as.character(product_id)),
variation_id = case_when(product_id == variation_id ~"0",
TRUE ~ as.character(variation_id))
) %>%
# [2] when product_id == "0" & variation_id is.na
## these are products that have since been deleted
## these products will also be deleted from the database from this date on
filter(product_id != "0" & is.na(variation_id)==TRUE) %>%
# [3] for the remaining records, is.na(variation_id)=TRUE indicates a simple product
## all NAs in variation_id will be replaced with "0000" to explicitly indicate simple products
mutate(variation_id = case_when(is.na(variation_id)==TRUE ~ "0000",
TRUE ~ as.character(variation_id)))
View(order_main_pivot)
order_main_pivot <- df_list$order_main %>%
# gather all "line_item_" columns
pivot_longer(cols = starts_with("line_item"),
names_to = "item",
values_to = "item_description",
values_drop_na = TRUE) %>%
# extract product info from item_description
mutate("product_id" = str_extract(item_description, "(?<=product_id:)[:digit:]*"),
"variation_id" = str_extract(item_description, "(?<=variation_id:)[:digit:]*"),
"quantity" = str_extract(item_description, "(?<=quantity:)[:digit:]*(?=|total)"),
"name" = str_sub(str_trim(str_extract(item_description, "(?<=name:).*(?=product_id:)")),start=1, end=-2),
"color" = str_extract(item_description, "(?<=color:|colors:)[:alpha:]*[:space:]*[:alpha:]*[:space:]*[:alpha:]*")) %>%
separate(name, into = c("name", "detail"), sep = "-", extra="merge", fill="right") %>%
mutate_at(c("name", "detail"), str_trim)
# handle three scenarios of product_id == "0" and/or variation_id == NA
order_main_pivot <- order_main_pivot %>%
# [1] when there's a variation_id but no product_id:
## WooCommerce' mistake? the id listed as variation_id should actually be in the product_id column
## comparing against wcSmartManager plugin shows this
## for these instances, swap the contents of product_id and variation_id
mutate(product_id = case_when(product_id == "0" & is.na(variation_id) == FALSE ~ variation_id,
TRUE ~ as.character(product_id)),
variation_id = case_when(product_id == variation_id ~"0",
TRUE ~ as.character(variation_id))
) %>%
# [2] when product_id == "0" & variation_id is.na
## these are products that have since been deleted
## these products will also be deleted from the database from this date on
filter(product_id != "0" & is.na(variation_id)!=TRUE) %>%
# [3] for the remaining records, is.na(variation_id)=TRUE indicates a simple product
## all NAs in variation_id will be replaced with "0000" to explicitly indicate simple products
mutate(variation_id = case_when(is.na(variation_id)==TRUE ~ "0000",
TRUE ~ as.character(variation_id)))
source('C:/Users/sjara/git/made-in-america-yarns/update_db.r', echo=TRUE)
data_norm$order_coupon <- df_list$order_main %>%
mutate("coupon" = str_sub(str_trim(str_extract(coupon_items, "(?<=code:).*(?=amount:)")), start=1, end=-2)) %>%
distinct(order_id,
coupon)
check_primary_keys(define_primary_keys())
check_empty(data_norm$product)
check_empty(data_norm$order_coupon)
glimpse(data_norm$order_coupon)
glimpse(data_norm$product_usage)
df_list$order_main %>%
mutate("coupon" = str_sub(str_trim(str_extract(coupon_items, "(?<=code:).*(?=amount:)")), start=1, end=-2)) %>%
filter(is.na(coupon)==FALSE) %>%
select(order_id,
coupon) %>%
glimpse()
df_list$order_main %>%
mutate("coupon" = str_sub(str_trim(str_extract(coupon_items, "(?<=code:).*(?=amount:)")), start=1, end=-2)) %>%
filter(is.na(coupon)==FALSE) %>%
distinct(order_id,
coupon) %>%
glimpse()
source('C:/Users/sjara/git/made-in-america-yarns/functions.R', echo=TRUE)
source('C:/Users/sjara/git/made-in-america-yarns/update_db.r', echo=TRUE)
order_main_pivot %>%
distinct(product_id, meta.yarn_usage)
order_main_pivot %>%
mutate(meta.yarn_usage = as.list(meta.yarn_usage)) %>%
distinct(product_id, meta.yarn_usage)
data_norm$product_usage <- order_main_pivot %>%
mutate(meta.yarn_usage = as.list(meta.yarn_usage)) %>%
distinct(product_id, meta.yarn_usage)
View(data_norm$product_usage)
product_category <- df_list$product_main %>%
mutate("fiber" = str_extract_all(categories, "(?<=fiber > )[^,]*"),
"yarn_weight" = str_extract_all(categories, "(?<=yarn weight > )[^,]*"),
"effect" = str_extract_all(categories, "(?<=effect > )[^,]*"),
"hue" = str_extract_all(categories, "(?<=hue > )[^,]*"),
"big_cones" = str_detect(categories, "big cones"),
"spools" = str_detect(categories, "spools"))
View(product_category)
order_main_pivot %>%
filter(is.na(meta.yarn_usage)==FALSE) %>%
mutate(meta.yarn_usage = as.list(meta.yarn_usage)) %>%
unnest(meta.yarn_usage)
order_main_pivot %>%
select(meta.yarn_usage,
product_id) %>%
filter(is.na(meta.yarn_usage)==FALSE) %>%
mutate(meta.yarn_usage = as.list(meta.yarn_usage)) %>%
unnest(meta.yarn_usage)
order_main_pivot %>%
select(meta.yarn_usage,
product_id) %>%
filter(is.na(meta.yarn_usage)==FALSE)
order_main_pivot %>%
select(meta.yarn_usage,
product_id) %>%
mutate(meta.yarn_usage = str_split(meta.yarn_usage, pattern=",")) %>%
filter(is.na(meta.yarn_usage)==FALSE)
str_split(order_main_pivot$meta.yarn_usage, pattern=",")
test <- str_split(order_main_pivot$meta.yarn_usage, pattern=",")
test
glimpse(test)
unlist(order_main_pivot$meta.yarn_usage)
glimpse(order_main_pivot$meta.yarn_usage)
order_main_pivot$meta.yarn_usage[[2]]
order_main_pivot$meta.yarn_usage[[3]]
unlist(order_main_pivot$meta.yarn_usage[[3]])
usage <- strsplit(order_main_pivot$meta.yarn_usage, split = ",")
data.frame(V1 = rep(df$V1, sapply(usage, length)), V2 = unlist(usage))
usage <- strsplit(order_main_pivot$meta.yarn_usage, split = ",")
data.frame(V1 = rep(order_main_pivot$product_id, sapply(usage, length)), V2 = unlist(usage))
usage <- strsplit(order_main_pivot$meta.yarn_usage, split = ",")
data.frame(product_id = rep(order_main_pivot$product_id, sapply(usage, length)), meta.yarn_usage = unlist(usage))
sapply(usage, length))
sapply(usage, length)
unlist(usage)
usage
unlist(usage)
source('C:/Users/sjara/git/made-in-america-yarns/update_db.r', echo=TRUE)
source('C:/Users/sjara/git/made-in-america-yarns/update_db.r', echo=TRUE)
glimpse(data_norm$product_usage)
check_empty <- function(df){
#checks every column in df for NAs and ""
df <- data.frame("any_nas" = apply(df, 2, function(df) any(is.na(df))),
"any_empty_character_vectors" = apply(df, 2, function(df) any(df == "", na.rm = TRUE)))
return(df)
}
check_empty(data_norm$product_usage)
data_norm$product_usage <- data.frame(product_id = rep(order_main_pivot$product_id, sapply(usage_list, length)),
meta.yarn_usage = unlist(usage_list)) %>%
filter(is.na(meta.yarn_usage)==FALSE)
# unpack meta.yarn_usage with multiple usages
usage_list <- strsplit(order_main_pivot$meta.yarn_usage, split = ",")
# create a new data frame with room to insert the usages previously packed in comma-separated character strings
data_norm$product_usage <- data.frame(product_id = rep(order_main_pivot$product_id, sapply(usage_list, length)),
meta.yarn_usage = unlist(usage_list)) %>%
filter(is.na(meta.yarn_usage)==FALSE)
source('C:/Users/sjara/git/made-in-america-yarns/update_db.r', echo=TRUE)
#------------------
order_main_pivot <- df_list$order_main %>%
# gather all "line_item_" columns
pivot_longer(cols = starts_with("line_item"),
names_to = "item",
values_to = "item_description",
values_drop_na = TRUE) %>%
# extract product info from item_description
mutate("product_id" = str_extract(item_description, "(?<=product_id:)[:digit:]*"),
"variation_id" = str_extract(item_description, "(?<=variation_id:)[:digit:]*"),
"quantity" = str_extract(item_description, "(?<=quantity:)[:digit:]*(?=|total)"),
"name" = str_sub(str_trim(str_extract(item_description, "(?<=name:).*(?=product_id:)")),start=1, end=-2),
"color" = str_extract(item_description, "(?<=color:|colors:)[:alpha:]*[:space:]*[:alpha:]*[:space:]*[:alpha:]*")) %>%
separate(name, into = c("name", "detail"), sep = "-", extra="merge", fill="right") %>%
mutate_at(c("name", "detail"), str_trim)
# handle three scenarios of product_id == "0" and/or variation_id == NA
order_main_pivot <- order_main_pivot %>%
# [1] when there's a variation_id but no product_id:
## WooCommerce' mistake? the id listed as variation_id should actually be in the product_id column
## comparing against wcSmartManager plugin shows this
## for these instances, swap the contents of product_id and variation_id
mutate(product_id = case_when(product_id == "0" & is.na(variation_id) == FALSE ~ variation_id,
TRUE ~ as.character(product_id)),
# variation_id = "9999" indicates a missing variation_id
# this is likely due to data loss
variation_id = case_when(product_id == variation_id ~"9999",
TRUE ~ as.character(variation_id))
) %>%
# [2] when product_id == "0" & variation_id is.na
## these are products that have since been deleted
## these products will also be deleted from the database from this date on
filter(product_id != "0" & is.na(variation_id)!=TRUE) %>%
# [3] for the remaining records, is.na(variation_id)=TRUE indicates a simple product
## all NAs in variation_id will be replaced with "0000" to explicitly indicate simple products
mutate(variation_id = case_when(is.na(variation_id)==TRUE ~ "0000",
TRUE ~ as.character(variation_id)))
# get list of updated data
df_list <- data
# initialize list for normalized data frames
data_norm <- list()
###############
#
#
#
# create normalized data frames:
#
#
#
###############
# order_
###############
#
df_list$order_main <- df_list$order_main %>%
# redefine the existing customer_id column to be more appropriate
rename(user_id = customer_id) %>%
# replace "" with NA, convert to lowercase
mutate_if(is.character, list(~na_if(tolower(.),""))) %>%
mutate(user_id = na_if(user_id, 0)) %>%
# only orders in us & usd
filter(shipping_country == "us",
order_currency == "usd") %>%
select(-c(shipping_country, order_currency)) %>%
# create customer_id column based on billing_email
group_by(billing_email) %>%
mutate("customer_id" = cur_group_id()) %>%
ungroup()
data_norm$order <- df_list$order_main %>%
# extract date from order_date
mutate(order_date = as_date(ymd_hms(order_date)),
# convert ids to character
order_id = as.character(order_id),
customer_id = as.character(customer_id)) %>%
select(order_id,
order_date,
order_total,
customer_id,
billing_company)
#------------------
order_main_pivot <- df_list$order_main %>%
# gather all "line_item_" columns
pivot_longer(cols = starts_with("line_item"),
names_to = "item",
values_to = "item_description",
values_drop_na = TRUE) %>%
# extract product info from item_description
mutate("product_id" = str_extract(item_description, "(?<=product_id:)[:digit:]*"),
"variation_id" = str_extract(item_description, "(?<=variation_id:)[:digit:]*"),
"quantity" = str_extract(item_description, "(?<=quantity:)[:digit:]*(?=|total)"),
"name" = str_sub(str_trim(str_extract(item_description, "(?<=name:).*(?=product_id:)")),start=1, end=-2),
"color" = str_extract(item_description, "(?<=color:|colors:)[:alpha:]*[:space:]*[:alpha:]*[:space:]*[:alpha:]*")) %>%
separate(name, into = c("name", "detail"), sep = "-", extra="merge", fill="right") %>%
mutate_at(c("name", "detail"), str_trim)
# handle three scenarios of product_id == "0" and/or variation_id == NA
order_main_pivot <- order_main_pivot %>%
# [1] when there's a variation_id but no product_id:
## WooCommerce' mistake? the id listed as variation_id should actually be in the product_id column
## comparing against wcSmartManager plugin shows this
## for these instances, swap the contents of product_id and variation_id
mutate(product_id = case_when(product_id == "0" & is.na(variation_id) == FALSE ~ variation_id,
TRUE ~ as.character(product_id)),
# variation_id = "9999" indicates a missing variation_id
# this is likely due to data loss
variation_id = case_when(product_id == variation_id ~"9999",
TRUE ~ as.character(variation_id))
) %>%
# [2] when product_id == "0" & variation_id is.na
## these are products that have since been deleted
## these products will also be deleted from the database from this date on
filter(product_id != "0" & is.na(variation_id)!=TRUE) %>%
# [3] for the remaining records, is.na(variation_id)=TRUE indicates a simple product
## all NAs in variation_id will be replaced with "0000" to explicitly indicate simple products
mutate(variation_id = case_when(is.na(variation_id)==TRUE ~ "0000",
TRUE ~ as.character(variation_id)))
View(order_main_pivot)
source('C:/Users/sjara/git/made-in-america-yarns/update_db.r', echo=TRUE)
source('C:/Users/sjara/git/made-in-america-yarns/update_db.r', echo=TRUE)
lapply(data_norm, check_empty)
product_category %>%
filter(type == "variable") %>%
rename("product_id"=id) %>% glimpse()
product_category <- df_list$product_main %>%
mutate("fiber" = str_extract_all(categories, "(?<=fiber > )[^,]*"),
"yarn_weight" = str_extract_all(categories, "(?<=yarn weight > )[^,]*"),
"effect" = str_extract_all(categories, "(?<=effect > )[^,]*"),
"hue" = str_extract_all(categories, "(?<=hue > )[^,]*"),
"big_cones" = str_detect(categories, "big cones"),
"spools" = str_detect(categories, "spools"))
product_category %>%
filter(type == "variable") %>%
rename("product_id"=id) %>% glimpse()
product_category %>%
filter(type == "variable") %>%
rename("product_id"=id) %>%
unnest(yarn_weight) %>% glimpse()
glimpse(data_norm$customer)
glimpse(data_norm$product)
source('C:/Users/sjara/git/made-in-america-yarns/update_db.r', echo=TRUE)
check_empty <- function(df){
#checks every column in df for NAs and ""
df <- data.frame("any_nas" = apply(df, 2, function(df) any(is.na(df))),
"any_empty_character_vectors" = apply(df, 2, function(df) any(df == "", na.rm = TRUE)))
return(df)
}
View(data_norm)
