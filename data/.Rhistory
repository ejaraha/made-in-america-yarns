order <- read.csv("C:\Users\sjara\Downloads\wc_order.csv")
order <- read.csv("C:/Users/sjara/Downloads/wc_order.csv")
glimpse(order)
head(order)
install.packages(tidyverse)
install.packages("tidyverse")
glimpse(order)
library(dplyr)
glimpse(order)
library(dplyr)
library(tidyr)
library(lubridate)
library(stringr)
library(purrr)
source("C:/Users/sjara/git/made-in-america-yarns/functions.R")
setwd("C:/Users/sjara/git/made-in-america-yarns/data")
# update data
#-------------------------------------------------------------
data <- update()
# normalize data
#-------------------------------------------------------------
data_norm <- normalize(data)
# check primary keys
#-------------------------------------------------------------
check_primary_keys(primary_key_list())
source("C:/Users/sjara/git/made-in-america-yarns/functions.R")
# check primary keys
#-------------------------------------------------------------
check_primary_keys(primary_key_list())
data$order_main <- data$order_main %>%
# redefine the existing customer_id column to be more appropriate
rename(user_id = customer_id) %>%
# replace "" with NA, convert to lowercase
mutate_if(is.character, list(~na_if(tolower(.),""))) %>%
mutate(user_id = na_if(user_id, 0)) %>%
# only orders in us & usd
filter(shipping_country == "us",
order_currency == "usd") %>%
select(-c(shipping_country, order_currency)) %>%
# create customer_id column based on billing_email
group_by(billing_email) %>%
mutate("customer_id" = cur_group_id()) %>%
ungroup()
data_norm$order <- data$order_main %>%
# extract date from order_date
mutate(order_date = as_date(ymd_hms(order_date)),
# convert ids to character
order_id = as.character(order_id),
customer_id = as.character(customer_id)) %>%
select(order_id,
order_date,
order_total,
customer_id,
billing_company)
order_main_pivot <- data$order_main %>%
# gather all "line_item_" columns
pivot_longer(cols = starts_with("line_item"),
names_to = "item",
values_to = "item_description",
values_drop_na = TRUE) %>%
# extract product info from item_description
mutate("product_id" = str_extract(item_description, "(?<=product_id:)[:digit:]*"),
"variation_id" = str_extract(item_description, "(?<=variation_id:)[:digit:]*"),
"quantity" = as.integer(str_extract(item_description, "(?<=quantity:)[:digit:]*(?=|total)")),
"name" = str_sub(str_trim(str_extract(item_description, "(?<=name:).*(?=product_id:)")),start=1, end=-2),
"color" = str_extract(item_description, "(?<=color:|colors:)[:alpha:]*[:space:]*[:alpha:]*[:space:]*[:alpha:]*")) %>%
separate(name, into = c("name", "detail"), sep = "-", extra="merge", fill="right") %>%
mutate_at(c("name", "detail"), str_trim)
# handle three scenarios of product_id == "0" and/or variation_id == NA
order_main_pivot <- order_main_pivot %>%
# [1] when there's a variation_id but no product_id:
## WooCommerce' mistake? the id listed as variation_id should actually be in the product_id column
## comparing against wcSmartManager plugin shows this
## for these instances, swap the contents of product_id and variation_id
mutate(product_id = case_when(product_id == "0" & is.na(variation_id) == FALSE ~ variation_id,
TRUE ~ as.character(product_id)),
# variation_id = "9999" indicates a missing variation_id
# this is likely due to data loss
variation_id = case_when(product_id == variation_id ~"9999",
TRUE ~ as.character(variation_id))
) %>%
# [2] when product_id == "0" & variation_id is.na
## these are products that have since been deleted
## these products will also be deleted from the database from this date on
filter(product_id != "0" & is.na(variation_id)!=TRUE) %>%
# [3] for the remaining records, is.na(variation_id)=TRUE indicates a simple product
## all NAs in variation_id will be replaced with "0000" to explicitly indicate simple products
mutate(variation_id = case_when(is.na(variation_id)==TRUE ~ "0000",
TRUE ~ as.character(variation_id)))
n_9999 <- order_main_pivot %>% filter(variation_id == "9999") %>% nrow()
n_0000 <- order_main_pivot %>% filter(variation_id == "0000") %>% nrow()
p_9999 <- as.integer(n_9999/nrow(order_main_pivot)*100)
cat(sprintf("%i rows in order_main_pivot have been assigned a variation_id of \"0000\"\nindicating a SIMPLE PRODUCT\n", n_0000))
cat(sprintf("%i rows in order_main_pivot have been assigned a variation_id of \"9999\"\nThat's %i percent of the rows\n*?*?*Investigate if this gets above 10 percent",n_9999, p_9999))
glimpse(order_main_pivot)
data.frame(product_id = rep(order_main_pivot$product_id, sapply(usage_list, length)),
usage = unlist(usage_list)) %>%
glipmse()
data.frame(product_id = rep(order_main_pivot$product_id, sapply(usage_list, length)),
usage = unlist(usage_list)) %>%
glimpse()
# unpack meta.yarn_usage with multiple usages
usage_list <- strsplit(order_main_pivot$meta.yarn_usage, split = ",")
data.frame(product_id = rep(order_main_pivot$product_id, sapply(usage_list, length)),
meta.yarn_usage = unlist(usage_list)) %>%
glimpse()
data.frame(product_id = rep(order_main_pivot$product_id, sapply(usage_list, length)),
meta.yarn_usage = unlist(usage_list)) %>%
filter(is.na(meta.yarn_usage)==TRUE) %>%
glimpse()
data.frame(product_id = rep(order_main_pivot$product_id, sapply(usage_list, length)),
meta.yarn_usage = unlist(usage_list)) %>%
filter(is.na(meta.yarn_usage)==FALSE) %>%
distinct()%>%
glimpse()
usage_list_unique <- data.frame(usage = usage_list,
usage_length = sapply(usage_list, length))
usage_list_unique
glimpse(usage_list_unique)
length(usage_list)
usage_length <- sapply(usage_list, length)
usage_list_unique <- data.frame(usage = unlist(usage_list),
usage_length = sapply(usage_list, length))
usage_list_unique %>% filter(usage_length)
usage_list_unique %>% filter(usage_length >1)
usage_list_unique %>% filter(usage_length >1) %>% nrow
usage_list_unique %>% filter(usage_length ==1) %>% nrow
usage_list_unique %>% filter(is.na(usage_length==TRUE)) %>% nrow
View(usage_list)
usage_list_unique %>% filter(usage_length ==NA) %>% nrow
usage_list_unique %>% filter(usage_length =="NA") %>% nrow
usage_list_unique %>% filter(usage_length == NA_character_) %>% nrow
usage_list_unique %>% filter(usage == NA_character_) %>% nrow
View(usage_list_unique)
usage_list_unique <- data.frame(usage = unlist(usage_list),
usage_length = sapply(usage_list, length))
usage_list_unique <- sapply(usage_list, length)
usage_list_unique <- lapply(usage_list, length)
View(usage_list_unique)
length(usage_list)
View(usage_list)
data.frame(product_id = rep(order_main_pivot$product_id, sapply(usage_list, length)),
meta.yarn_usage = unlist(usage_list)) %>%
filter(is.na(meta.yarn_usage)==FALSE) %>%
count() %>% glipmse()
data.frame(product_id = rep(order_main_pivot$product_id, sapply(usage_list, length)),
meta.yarn_usage = unlist(usage_list)) %>%
filter(is.na(meta.yarn_usage)==FALSE) %>%
count(product_id, met.yarn_usage) %>% glipmse()
data.frame(product_id = rep(order_main_pivot$product_id, sapply(usage_list, length)),
meta.yarn_usage = unlist(usage_list)) %>%
filter(is.na(meta.yarn_usage)==FALSE) %>%
count(product_id, met.yarn_usage) %>% glimpse()
data.frame(product_id = rep(order_main_pivot$product_id, sapply(usage_list, length)),
meta.yarn_usage = unlist(usage_list)) %>%
filter(is.na(meta.yarn_usage)==FALSE) %>%
count(product_id, meta.yarn_usage) %>% glimpse()
data.frame(product_id = rep(order_main_pivot$product_id, sapply(usage_list, length)),
meta.yarn_usage = unlist(usage_list)) %>%
filter(is.na(meta.yarn_usage)==FALSE) %>%
count(product_id, meta.yarn_usage) %>% arrange(desc(n)) %>% glimpse()
data.frame(product_id = rep(order_main_pivot$product_id, sapply(usage_list, length)),
meta.yarn_usage = unlist(usage_list)) %>%
filter(is.na(meta.yarn_usage)==FALSE) %>%
# how many times was each product used for a specific usage?
#*****caution - this is not really product-level data.****************
# usage info is gathered at checkout (order-level data).
# so, if a customer buys some yarn for knitting and some yarn for crocheting, this table wouldn't
# know which was purchased for which. to account for that, a rule has been implemented.
# a product must match a usage at least two times before it is recorded in this table****
count(product_id, meta.yarn_usage) %>%
filter(n >2) %>%
arrange(desc(n)) %>% glimpse()
data.frame(product_id = rep(order_main_pivot$product_id, sapply(usage_list, length)),
meta.yarn_usage = unlist(usage_list)) %>%
filter(is.na(meta.yarn_usage)==FALSE) %>%
# how many times was each product used for a specific usage?
#*****caution - this is not really product-level data.****************
# usage info is gathered at checkout (order-level data).
# so, if a customer buys some yarn for knitting and some yarn for crocheting, this table wouldn't
# know which was purchased for which. to account for that, a rule has been implemented.
# a product must match a usage at least two times before it is recorded in this table****
count(product_id, meta.yarn_usage) %>%
filter(n => 2) %>%
arrange(desc(n)) %>% glimpse()
data.frame(product_id = rep(order_main_pivot$product_id, sapply(usage_list, length)),
meta.yarn_usage = unlist(usage_list)) %>%
filter(is.na(meta.yarn_usage)==FALSE) %>%
# how many times was each product used for a specific usage?
#*****caution - this is not really product-level data.****************
# usage info is gathered at checkout (order-level data).
# so, if a customer buys some yarn for knitting and some yarn for crocheting, this table wouldn't
# know which was purchased for which. to account for that, a rule has been implemented.
# a product must match a usage at least two times before it is recorded in this table****
count(product_id, meta.yarn_usage) %>%
filter(n >= 2) %>%
arrange(desc(n)) %>% glimpse()
data.frame(product_id = rep(order_main_pivot$product_id, sapply(usage_list, length)),
meta.yarn_usage = unlist(usage_list)) %>%
filter(is.na(meta.yarn_usage)==FALSE) %>%
# how many times was each product used for a specific usage?
#*****caution - this is not really product-level data.****************
# usage info is gathered at checkout (order-level data).
# so, if a customer buys some yarn for knitting and some yarn for crocheting, this table wouldn't
# know which was purchased for which. to account for that, a rule has been implemented.
# a product must match a usage at least two times before it is recorded in this table****
count(product_id, meta.yarn_usage) %>%
filter(n >= 2) %>%
select (-n)
library(dplyr)
library(tidyr)
library(lubridate)
library(stringr)
library(purrr)
source("C:/Users/sjara/git/made-in-america-yarns/functions.R")
setwd("C:/Users/sjara/git/made-in-america-yarns/data")
# update data
#-------------------------------------------------------------
data <- update()
# normalize data
#-------------------------------------------------------------
data_norm <- normalize(data)
# check primary keys
#-------------------------------------------------------------
check_primary_keys(primary_key_list())
library(dplyr)
library(tidyr)
library(lubridate)
library(stringr)
library(purrr)
source("C:/Users/sjara/git/made-in-america-yarns/functions.R")
setwd("C:/Users/sjara/git/made-in-america-yarns/data")
# update data
#-------------------------------------------------------------
data <- update()
# normalize data
#-------------------------------------------------------------
data_norm <- normalize(data)
# check primary keys
#-------------------------------------------------------------
check_primary_keys(primary_key_list())
glimpse(data$order_main)
data$order_main <- data$order_main %>%
# redefine the existing customer_id column to be more appropriate
rename(user_id = customer_id) %>%
# replace "" with NA, convert to lowercase
mutate_if(is.character, list(~na_if(tolower(.),""))) %>%
mutate(user_id = na_if(user_id, 0)) %>%
# only orders in us & usd
filter(shipping_country == "us",
order_currency == "usd") %>%
select(-c(shipping_country, order_currency)) %>%
# create customer_id column based on billing_email
group_by(billing_email) %>%
mutate("customer_id" = cur_group_id()) %>%
ungroup()
glimpse(data$order_main)
glimpse(data$role_main)
role_list <- strsplit(data$role_main[["wp.capabilities"]],":true") %>%
# remove anything that isn't a letter
lapply(role_list, FUN = function(x){str_replace_all(x,"[^a-z]", "")})
role_list <- strsplit(data$role_main[["wp.capabilities"]],":true") %>%
# remove anything that isn't a letter
lapply(.,FUN = function(x){str_replace_all(x,"[^a-z]", "")})
View(role_list)
data.frame("user_id" = rep(data$role_main[["id"]], sapply(role_list, length)),
"role" = unlist(role_list)) %>%
#filter(role == "") %>%
distinct(role)
data.frame("user_id" = rep(data$role_main[["id"]], sapply(role_list, length)),
"role" = unlist(role_list)) %>%
filter(role == "wholesaletaxfree") %>%
glimpse()
data.frame("user_id" = rep(data$role_main[["id"]], sapply(role_list, length)),
"role" = unlist(role_list)) %>%
filter(role %in% c("wholesaletaxfree", "wholesalebuyer")) %>%
glimpse()
glimpse(order_main)
glimpse(data$order_main)
data$order_main %>% left_join(role_df, by="user_id") %>% glimpse()
role_df <- data.frame("user_id" = rep(data$role_main[["id"]], sapply(role_list, length)),
"role" = unlist(role_list)) %>%
filter(role %in% c("wholesaletaxfree", "wholesalebuyer"))
data$order_main %>% left_join(role_df, by="user_id") %>% glimpse()
data$order_main %>% left_join(role_df, by="user_id") %>%
select(user_id, role) %>% glimpse()
data$order_main %>% nrow
role_df %>% distinct(role)
role_df <- data.frame("user_id" = rep(data$role_main[["id"]], sapply(role_list, length)),
"role" = unlist(role_list)) %>%
filter(role == "wholesalebuyer")
data$order_main %>% left_join(role_df, by="user_id") %>%
select(user_id, role) %>% glimpse()
data$order_main %>% left_join(role_df, by="user_id") %>%
select(user_id, role) %>%
mutate("user_type" = case_when(is.na(user_id)==TRUE ~ "guest",
role=="wholesalebuyer" ~ "wholesale buyer",
is.na(user_id)==FALSE ~ "registered customer")) %>% glimpse()
data$order_main %>% left_join(role_df, by="user_id") %>%
select(user_id, role) %>%
mutate("user_type" = case_when(is.na(user_id)==TRUE ~ "guest",
role=="wholesalebuyer" ~ "wholesale buyer",
is.na(user_id)==FALSE ~ "registered customer")) %>%
filter(role=="wholesalebuyer") %>% glimpse()
data$order_main %>% left_join(role_df, by="user_id") %>%
select(user_id, role) %>%
mutate("user_type" = case_when(is.na(user_id)==TRUE ~ "guest",
role=="wholesalebuyer" ~ "wholesale buyer",
is.na(user_id)==FALSE ~ "registered customer")) %>%
filter(user_type=="registered customer") %>% glimpse()
data$order_main %>% left_join(role_df, by="user_id") %>%
select(user_id, role) %>%
mutate("user_type" = case_when(is.na(user_id)==TRUE ~ "guest",
role=="wholesalebuyer" ~ "wholesale buyer",
is.na(user_id)==FALSE ~ "registered customer")) %>%
filter(user_type=="guest") %>% glimpse()
data$order_main %>% left_join(role_df, by="user_id") %>%
select(user_id, role) %>%
mutate("user_type" = case_when(is.na(user_id)==TRUE ~ "guest",
role=="wholesalebuyer" ~ "wholesale buyer",
is.na(user_id)==FALSE ~ "registered customer")) %>%
filter(user_type=="wholesale buyer") %>% glimpse()
data$order_main %>% left_join(role_df, by="user_id") %>%
select(user_id, role) %>%
mutate("user_type" = case_when(is.na(user_id)==TRUE ~ "guest",
role=="wholesalebuyer" ~ "wholesale buyer",
is.na(user_id)==FALSE ~ "registered customer")) %>%
filter(is.na(user_type)==TRUE) %>% glimpse()
data$order_main %>% left_join(role_df, by="user_id") %>%
select(user_id, role) %>%
mutate("user_type" = case_when(is.na(user_id)==TRUE ~ "guest",
role=="wholesalebuyer" ~ "wholesale buyer",
is.na(user_id)==FALSE ~ "registered customer")) %>% glimpse()
378+381+92
source('C:/Users/sjara/git/made-in-america-yarns/update_db.r', echo=TRUE)
library(dplyr)
library(tidyr)
library(lubridate)
library(stringr)
library(purrr)
source("C:/Users/sjara/git/made-in-america-yarns/functions.R")
setwd("C:/Users/sjara/git/made-in-america-yarns/data")
# update data
#-------------------------------------------------------------
data <- update()
# normalize data
#-------------------------------------------------------------
data_norm <- normalize(data)
# check primary keys
#-------------------------------------------------------------
check_primary_keys(primary_key_list())
#lapply(data, check_empty)
# normalize data
#-------------------------------------------------------------
data_norm <- normalize(data)
# check primary keys
#-------------------------------------------------------------
check_primary_keys(primary_key_list())
# check primary keys
#-------------------------------------------------------------
check_primary_keys(primary_key_list())
source("C:/Users/sjara/git/made-in-america-yarns/functions.R")
source("C:/Users/sjara/git/made-in-america-yarns/functions.R")
# check primary keys
#-------------------------------------------------------------
check_primary_keys(primary_key_list())
source("C:/Users/sjara/git/made-in-america-yarns/functions.R")
# normalize data
#-------------------------------------------------------------
data_norm <- normalize(data)
# check primary keys
#-------------------------------------------------------------
check_primary_keys(primary_key_list())
source("C:/Users/sjara/git/made-in-america-yarns/functions.R")
# normalize data
#-------------------------------------------------------------
data_norm <- normalize(data)
# check primary keys
#-------------------------------------------------------------
check_primary_keys(primary_key_list())
data_norm$order_product %>% glimpse()
data_norm$order %>% glimpse()
