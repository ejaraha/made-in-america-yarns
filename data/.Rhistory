order <- read.csv("C:\Users\sjara\Downloads\wc_order.csv")
order <- read.csv("C:/Users/sjara/Downloads/wc_order.csv")
glimpse(order)
head(order)
install.packages(tidyverse)
install.packages("tidyverse")
glimpse(order)
library(dplyr)
glimpse(order)
library(dplyr)
library(tidyr)
library(lubridate)
library(stringr)
library(purrr)
source("C:/Users/sjara/git/made-in-america-yarns/functions.R")
setwd("C:/Users/sjara/git/made-in-america-yarns/data")
# update data
#-------------------------------------------------------------
data <- update()
# normalize data
#-------------------------------------------------------------
data_norm <- normalize(data)
test <- data.frame("a" = c(1,2,3,4), "b" = c(1,2,5,6))
count(test)
count(test, everything())
count(test$a, test$b
count(test$a, test$b)
count(test$a, test$b)
test(count(a,d))
test(count(a,b))
test%>%count(a,b)
test <- data.frame("a" = c(1,2,2,3,4), "b" = c(1,2,2,5,6))
test%>%count(a,b)
count(test)
distinct(test) %>% nrow()
test %>% nrow
source("C:/Users/sjara/git/made-in-america-yarns/functions.R")
# check primary keys
#-------------------------------------------------------------
check_primary_keys(primary_key_list())
glimpse(data_norm$product_usage)
data_norm$product_usage %>% distinct() %>% glimpse()
library(dplyr)
library(tidyr)
library(lubridate)
library(stringr)
library(purrr)
source("C:/Users/sjara/git/made-in-america-yarns/functions.R")
setwd("C:/Users/sjara/git/made-in-america-yarns/data")
# update data
#-------------------------------------------------------------
data <- update()
# normalize data
#-------------------------------------------------------------
data_norm <- normalize(data)
# check primary keys
#-------------------------------------------------------------
check_primary_keys(primary_key_list())
data$order_main %>%
distinct(customer_id,
billing_email,
user_id) %>% glimpse()
data$order_main %>%
distinct(customer_id,
billing_email,
customer_id) %>% glimpse()
data$order_main <- data$order_main %>%
# redefine the existing customer_id column to be more appropriate
rename(user_id = customer_id) %>%
# replace "" with NA, convert to lowercase
mutate_if(is.character, list(~na_if(tolower(.),""))) %>%
mutate(user_id = na_if(user_id, 0)) %>%
# only orders in us & usd
filter(shipping_country == "us",
order_currency == "usd") %>%
select(-c(shipping_country, order_currency)) %>%
# create customer_id column based on billing_email
group_by(billing_email) %>%
mutate("customer_id" = cur_group_id()) %>%
ungroup()
data_norm$order <- data$order_main %>%
# extract date from order_date
mutate(order_date = as_date(ymd_hms(order_date)),
# convert ids to character
order_id = as.character(order_id),
customer_id = as.character(customer_id)) %>%
select(order_id,
order_date,
order_total,
customer_id,
billing_company)
#------------------
order_main_pivot <- data$order_main %>%
# gather all "line_item_" columns
pivot_longer(cols = starts_with("line_item"),
names_to = "item",
values_to = "item_description",
values_drop_na = TRUE) %>%
# extract product info from item_description
mutate("product_id" = str_extract(item_description, "(?<=product_id:)[:digit:]*"),
"variation_id" = str_extract(item_description, "(?<=variation_id:)[:digit:]*"),
"quantity" = as.integer(str_extract(item_description, "(?<=quantity:)[:digit:]*(?=|total)")),
"name" = str_sub(str_trim(str_extract(item_description, "(?<=name:).*(?=product_id:)")),start=1, end=-2),
"color" = str_extract(item_description, "(?<=color:|colors:)[:alpha:]*[:space:]*[:alpha:]*[:space:]*[:alpha:]*")) %>%
separate(name, into = c("name", "detail"), sep = "-", extra="merge", fill="right") %>%
mutate_at(c("name", "detail"), str_trim)
# handle three scenarios of product_id == "0" and/or variation_id == NA
order_main_pivot <- order_main_pivot %>%
# [1] when there's a variation_id but no product_id:
## WooCommerce' mistake? the id listed as variation_id should actually be in the product_id column
## comparing against wcSmartManager plugin shows this
## for these instances, swap the contents of product_id and variation_id
mutate(product_id = case_when(product_id == "0" & is.na(variation_id) == FALSE ~ variation_id,
TRUE ~ as.character(product_id)),
# variation_id = "9999" indicates a missing variation_id
# this is likely due to data loss
variation_id = case_when(product_id == variation_id ~"9999",
TRUE ~ as.character(variation_id))
) %>%
# [2] when product_id == "0" & variation_id is.na
## these are products that have since been deleted
## these products will also be deleted from the database from this date on
filter(product_id != "0" & is.na(variation_id)!=TRUE) %>%
# [3] for the remaining records, is.na(variation_id)=TRUE indicates a simple product
## all NAs in variation_id will be replaced with "0000" to explicitly indicate simple products
mutate(variation_id = case_when(is.na(variation_id)==TRUE ~ "0000",
TRUE ~ as.character(variation_id)))
glimpse(order)
glimpse(order_main_pivot)
glimpse(data$order_main)
data$order_main %>%
distinct(customer_id,
billing_email,
user_id) %>% glimpse()
# check primary keys
#-------------------------------------------------------------
check_primary_keys(primary_key_list())
data$order_main %>%
count(customer_id,
billing_email,
user_id) %>% arrange(desc(n))%>% glimpse()
data$order_main %>%
distinct(customer_id,
billing_email,
user_id) %>% arrange(desc(email))%>% glimpse()
data$order_main %>%
distinct(customer_id,
billing_email,
user_id) %>% arrange(desc(billing_email))%>% glimpse()
glimpse(data$order_main)
data$order_main %>%
group_by(customer_id) %>%glimpse()
data$order_main %>%
group_by(customer_id) %>%
mutate("max_date_by_cid"=max(order_date)) %>%glimpse()
data$order_main %>%
group_by(customer_id) %>%
mutate("max_date_by_cid"=max(order_date)) %>%
filter(max_date_by_cide == order_date) %>%glimpse()
data$order_main %>%
group_by(customer_id) %>%
mutate("max_date_by_cid"=max(order_date)) %>%
filter(max_date_by_cid == order_date) %>%glimpse()
data$order_main %>%
group_by(customer_id) %>%
# get most recent info for a specific customer_id
mutate("max_date_by_cid"=max(order_date)) %>%
filter(max_date_by_cid == order_date) %>%
ungroup() %>%
select(customer_id,
billing_email,
user_id) %>% glimpse()
data_norm <- normalize(data)
data <- update()
# normalize data
#-------------------------------------------------------------
data_norm <- normalize(data)
source("C:/Users/sjara/git/made-in-america-yarns/functions.R")
setwd("C:/Users/sjara/git/made-in-america-yarns/data")
# update data
#-------------------------------------------------------------
data <- update()
# normalize data
#-------------------------------------------------------------
data_norm <- normalize(data)
data$order_main %>%
group_by(customer_id) %>%
# get most recent info for a specific customer_id
mutate("max_date_by_cid"=max(order_date)) %>%
filter(max_date_by_cid == order_date) %>%
ungroup() %>%
select(customer_id,
billing_email,
user_id)%>% glimpse()
data$order_main %>%glimpse()
source("C:/Users/sjara/git/made-in-america-yarns/functions.R")
setwd("C:/Users/sjara/git/made-in-america-yarns/data")
# update data
#-------------------------------------------------------------
data <- update()
# normalize data
#-------------------------------------------------------------
data_norm <- normalize(data)
# check primary keys
#-------------------------------------------------------------
check_primary_keys(primary_key_list())
source("C:/Users/sjara/git/made-in-america-yarns/functions.R")
setwd("C:/Users/sjara/git/made-in-america-yarns/data")
# update data
#-------------------------------------------------------------
data <- update()
# normalize data
#-------------------------------------------------------------
data_norm <- normalize(data)
# check primary keys
#-------------------------------------------------------------
check_primary_keys(primary_key_list())
data_norm$product %>%
left_join(data$product_hue,
by = c("product_id", "variation_id")) %>%
select(product_id,
variation_id,
hue) %>% glimpse()
data$product_hue <- data$product_hue %>%
mutate(across(.cols = contains("_id"), as.character))
data_norm$product %>%
left_join(data$product_hue,
by = c("product_id", "variation_id")) %>%
select(product_id,
variation_id,
hue) %>% glimpse()
source("C:/Users/sjara/git/made-in-america-yarns/functions.R")
# export normalized tables
#-------------------------------------------------------------
export_data_norm(data_norm)
library(dplyr)
library(tidyr)
library(lubridate)
library(stringr)
library(purrr)
source("C:/Users/sjara/git/made-in-america-yarns/functions.R")
setwd("C:/Users/sjara/git/made-in-america-yarns/data")
# update data
#-------------------------------------------------------------
data <- update()
# normalize data
#-------------------------------------------------------------
data_norm <- normalize(data)
# check primary keys
#-------------------------------------------------------------
check_primary_keys(primary_key_list())
# export normalized tables
#-------------------------------------------------------------
export_data_norm(data_norm)
lapply(names(data), function(df){
# write all normalized data frames to the /data/normalized directory
wd_data_norm <- "C:/Users/sjara/git/made-in-america-yarns/data/normalized"
write.csv(df_list[[df]], paste(wd_data_norm, "/", df, ".csv", sep=""), row.names = FALSE)
})
lapply(names(data), function(df){
# write all normalized data frames to the /data/normalized directory
wd_data_norm <- "C:/Users/sjara/git/made-in-america-yarns/data/normalized"
write.csv(data[[df]], paste(wd_data_norm, "/", df, ".csv", sep=""), row.names = FALSE)
})
source("C:/Users/sjara/git/made-in-america-yarns/functions.R")
# export normalized tables
#-------------------------------------------------------------
export_data_norm(data_norm)
lapply(data_norm, glimpse)
lapply(data_norm, glimpse())
lapply(data_norm, FUN = function(x){glimpse(x)})
lapply(data_norm, FUN = function(x){x %>%glimpse()})
lapply(data_norm, FUN = function(x){x %>%head()})
source('C:/Users/sjara/git/made-in-america-yarns/update_db.r', echo=TRUE)
lapply(data_norm, FUN = function(x){x %>%head()})
