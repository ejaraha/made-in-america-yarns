test
test <- data.frame("a"=c(1,2,3,4), "b"=c(5,6,4,4))
count(test)
count(test$b)
count(test, vars="c")
count(test, vars="b")
count(df=test)
count(df=test)
count(df = test)
count(df = test, vars = "a")
test %>% count()
test
test %>% count(b)
distinct(test)
test %>% count()
test %>% nrow()
pk_check <- data.frame("df" = str_sub(names(pk_list), start = 1, end = -4),
"is_unique" = lapply(pk_list,
function(pk){
if_else(count(pk)==nrow(pk),
TRUE,
FALSE)
}
),
"is_na" = lapply(pk_list,
function(pk){
# check for nas
any(is.na(pk))
}),
"is_empty_string" =  lapply(pk_list,
function(pk){
# check for ""
any(pk=="", na.rm = TRUE)
}
)
)
any(pk_check == TRUE)
pk_check
pk_check <- data.frame("df" = str_sub(names(pk_list), start = 1, end = -4),
"is_unique" = if_else(count(pk)==nrow(pk),
TRUE,
FALSE),
"is_na" = any(is.na(pk)),
"is_empty_string" = any(pk=="", na.rm = TRUE)
)
pk_check
any(pk_check == TRUE)
pk_check %>% filter(is_unique == FALSE |
is_na == TRUE |
is_empty_string == TRUE)
result <- if_else(nrow(invalid_pks) > 0,
invalid_pks,
"All primary keys are valid!")
invalid_pks <- pk_check %>% filter(is_unique == FALSE |
is_na == TRUE |
is_empty_string == TRUE)
result <- if_else(nrow(invalid_pks) > 0,
invalid_pks,
"All primary keys are valid!")
invalid_pks <- pk_check %>% filter(is_unique == FALSE |
is_na == TRUE |
is_empty_string == TRUE)
result <- if_else(nrow(invalid_pks) > 0,
invalid_pks,
"All primary keys are valid!")
invalid_pks <- pk_check %>% filter(is_unique == FALSE |is_na == TRUE |is_empty_string == TRUE)
result <- if_else(nrow(invalid_pks) > 0,
invalid_pks,
"All primary keys are valid!")
nrow(invalid_pks)
result <- if_else(nrow(invalid_pks) > 0,
"1",#invalid_pks,
"All primary keys are valid!")
result
result <- if_else(nrow(invalid_pks) > 0,
print(invalid_pks),
"All primary keys are valid!")
check_primary_keys <- function(){
pk_list <- list(
"order_pk" = data_norm$order %>%
select(order_id),
"order_product_pk" = data_norm$order_product %>%
select(order_id,
product_id,
variation_id),
"order_coupon_pk" = data_norm$order_coupon %>%
select(everything()),
"product_pk" = data_norm$product %>%
select(product_id,
variation_id),
"product_fiber_pk" = data_norm$product_fiber %>%
select(everything()),
"product_yarn_weight_pk" = data_norm$product_yarn_weight %>%
select(everything()),
"product_effect_pk" = data_norm$product_effect %>%
select(everything()),
"product_usage_pk" = data_norm$product_usage %>%
select(everything()),
"customer_pk" = data_norm$customer %>%
select(customer_id),
"customer_usage_pk" = data_norm$customer_usage %>%
select(everything())
)
pk_check <- data.frame("df" = str_sub(names(pk_list), start = 1, end = -4),
"is_unique" = if_else(count(pk)==nrow(pk),
TRUE,
FALSE),
"is_na" = any(is.na(pk)),
"is_empty_string" = any(pk=="", na.rm = TRUE)
)
invalid_pks <- pk_check %>% filter(is_unique == FALSE |is_na == TRUE |is_empty_string == TRUE)
if_else(nrow(invalid_pks) > 0,
return(invalid_pks),
return("All primary keys are valid!"))
}
check_primary_keys()
check_primary_keys <- function(){
pk_list <- list(
"order_pk" = data_norm$order %>%
select(order_id),
"order_product_pk" = data_norm$order_product %>%
select(order_id,
product_id,
variation_id),
"order_coupon_pk" = data_norm$order_coupon %>%
select(everything()),
"product_pk" = data_norm$product %>%
select(product_id,
variation_id),
"product_fiber_pk" = data_norm$product_fiber %>%
select(everything()),
"product_yarn_weight_pk" = data_norm$product_yarn_weight %>%
select(everything()),
"product_effect_pk" = data_norm$product_effect %>%
select(everything()),
"product_usage_pk" = data_norm$product_usage %>%
select(everything()),
"customer_pk" = data_norm$customer %>%
select(customer_id),
"customer_usage_pk" = data_norm$customer_usage %>%
select(everything())
)
pk_check <- data.frame("df" = str_sub(names(pk_list), start = 1, end = -4),
"is_unique" = if_else(count(pk)==nrow(pk),
TRUE,
FALSE),
"is_na" = any(is.na(pk)),
"is_empty_string" = any(pk=="", na.rm = TRUE)
)
invalid_pks <- pk_check %>% filter(is_unique == FALSE |is_na == TRUE |is_empty_string == TRUE)
if_else(nrow(invalid_pks) == 0,
return(invalid_pks),
return("All primary keys are valid!"))
}
check_primary_keys()
lapply(pk_list, function(pk){any(is.na(pk))})
lapply(pk_list, function(pk){if_else(count(pk)==nrow(pk),
TRUE,
FALSE)})
pk_check <- data.frame("df" = str_sub(names(pk_list), start = 1, end = -4),
"is_unique" = lapply(pk_list, function(pk){if_else(count(pk)==nrow(pk),
TRUE,
FALSE)}),
"is_na" = lapply(pk_list, function(pk){any(is.na(pk))}),
"is_empty_string" = lapply(pk_list, function(pk){any(pk=="", na.rm = TRUE)})
)
pk_check
lapply(pk_list, function(pk){any(pk=="", na.rm = TRUE)})
class(lapply(pk_list, function(pk){any(pk=="", na.rm = TRUE)}))
test <- lapply(pk_list, function(pk){any(pk=="", na.rm = TRUE)})
test
View(test)
pk_check <- as.data.frame("df" = str_sub(names(pk_list), start = 1, end = -4),
"is_unique" = lapply(pk_list, function(pk){if_else(count(pk)==nrow(pk),
TRUE,
FALSE)}),
"is_na" = lapply(pk_list, function(pk){any(is.na(pk))}),
"is_empty_string" = lapply(pk_list, function(pk){any(pk=="", na.rm = TRUE)})
)
pk_check <- data.frame("df" = str_sub(names(pk_list), start = 1, end = -4),
"is_unique" = lapply(pk_list, function(pk){if_else(count(pk)==nrow(pk),
TRUE,
FALSE)}),
"is_na" = lapply(pk_list, function(pk){any(is.na(pk))}),
"is_empty_string" = lapply(pk_list, function(pk){any(pk=="", na.rm = TRUE)})
)
View(pk_check)
pk_check <- data.frame(df = str_sub(names(pk_list), start = 1, end = -4),
is_unique = lapply(pk_list, function(pk){if_else(count(pk)==nrow(pk),
TRUE,
FALSE)}),
"is_na" = lapply(pk_list, function(pk){any(is.na(pk))}),
"is_empty_string" = lapply(pk_list, function(pk){any(pk=="", na.rm = TRUE)})
)
pk_check
rbind(df = str_sub(names(pk_list), start = 1, end = -4),
is_unique = lapply(pk_list, function(pk){if_else(count(pk)==nrow(pk),
TRUE,
FALSE)}),
is_na = lapply(pk_list, function(pk){any(is.na(pk))}),
is_empty_string = lapply(pk_list, function(pk){any(pk=="", na.rm = TRUE)})
)
cbind(df = str_sub(names(pk_list), start = 1, end = -4),
is_unique = lapply(pk_list, function(pk){if_else(count(pk)==nrow(pk),
TRUE,
FALSE)}),
is_na = lapply(pk_list, function(pk){any(is.na(pk))}),
is_empty_string = lapply(pk_list, function(pk){any(pk=="", na.rm = TRUE)})
)
pk_check <- cbind(is_unique = lapply(pk_list, function(pk){if_else(count(pk)==nrow(pk),
TRUE,
FALSE)}),
is_na = lapply(pk_list, function(pk){any(is.na(pk))}),
is_empty_string = lapply(pk_list, function(pk){any(pk=="", na.rm = TRUE)})
)
pk_check
names(pk_check) <- str_sub(names(pk_list), start = 1, end = -4)
pk_check
str_sub(names(pk_list), start = 1, end = -4)
names(pk_check) <- str_sub(names(pk_check), start = 1, end = -4)
pk_check
str_sub(names(pk_check), start = 1, end = -4)
pk_check <- cbind(is_unique = lapply(pk_list, function(pk){if_else(count(pk)==nrow(pk),
TRUE,
FALSE)}),
is_na = lapply(pk_list, function(pk){any(is.na(pk))}),
is_empty_string = lapply(pk_list, function(pk){any(pk=="", na.rm = TRUE)})
)
str_sub(names(pk_check), start = 1, end = -4)
pk_list <- list(
"order_pk" = data_norm$order %>%
select(order_id),
"order_product_pk" = data_norm$order_product %>%
select(order_id,
product_id,
variation_id),
"order_coupon_pk" = data_norm$order_coupon %>%
select(everything()),
"product_pk" = data_norm$product %>%
select(product_id,
variation_id),
"product_fiber_pk" = data_norm$product_fiber %>%
select(everything()),
"product_yarn_weight_pk" = data_norm$product_yarn_weight %>%
select(everything()),
"product_effect_pk" = data_norm$product_effect %>%
select(everything()),
"product_usage_pk" = data_norm$product_usage %>%
select(everything()),
"customer_pk" = data_norm$customer %>%
select(customer_id),
"customer_usage_pk" = data_norm$customer_usage %>%
select(everything())
)
#df = str_sub(names(pk_list), start = 1, end = -4)
pk_check <- cbind(is_unique = lapply(pk_list, function(pk){if_else(count(pk)==nrow(pk),
TRUE,
FALSE)}),
is_na = lapply(pk_list, function(pk){any(is.na(pk))}),
is_empty_string = lapply(pk_list, function(pk){any(pk=="", na.rm = TRUE)})
)
pk_check
names(pk_check)
cbind(is_unique = lapply(pk_list, function(pk){if_else(count(pk)==nrow(pk),
TRUE,
FALSE)}),
is_na = lapply(pk_list, function(pk){any(is.na(pk))}),
is_empty_string = lapply(pk_list, function(pk){any(pk=="", na.rm = TRUE)}),
make.row.names = FALSE
)
pk_check <- cbind(is_unique = lapply(pk_list, function(pk){if_else(count(pk)==nrow(pk),
TRUE,
FALSE)}),
is_na = lapply(pk_list, function(pk){any(is.na(pk))}),
is_empty_string = lapply(pk_list, function(pk){any(pk=="", na.rm = TRUE)})
)
names(pk_check)
str_sub(names(pk_check), start = 1, end = -4)
str_sub(names(pk_list), start = 1, end = -4)
names(pk_check) <- str_sub(names(pk_list), start = 1, end = -4)
names(pk_check) <- str_sub(names(pk_list), start = 1, end = -4)
pk_check
pk_check <- cbind(is_unique = lapply(pk_list, function(pk){if_else(count(pk)==nrow(pk),
TRUE,
FALSE)}),
is_na = lapply(pk_list, function(pk){any(is.na(pk))}),
is_empty_string = lapply(pk_list, function(pk){any(pk=="", na.rm = TRUE)})
)
pk_check
as.data.frame(pk_check)
pk_check <- as.data.frame(pk_check)
View(pk_check)
pk_check <- as.data.frame(pk_check, row.names = FALSE)
pk_check <- as.data.frame(pk_check)
row.names(pk_check) <- NULL
pk_check
cbind(df = str_sub(names(pk_list), start = 1, end = -4),
is_unique = lapply(pk_list, function(pk){if_else(count(pk)==nrow(pk),
TRUE,
FALSE)}),
is_na = lapply(pk_list, function(pk){any(is.na(pk))}),
is_empty_string = lapply(pk_list, function(pk){any(pk=="", na.rm = TRUE)})
)
pk_check <- cbind(df = str_sub(names(pk_list), start = 1, end = -4),
is_unique = lapply(pk_list, function(pk){if_else(count(pk)==nrow(pk),
TRUE,
FALSE)}),
is_na = lapply(pk_list, function(pk){any(is.na(pk))}),
is_empty_string = lapply(pk_list, function(pk){any(pk=="", na.rm = TRUE)})
)
pk_check <- as.data.frame(pk_check)
row.names(pk_check) <-NA# str_sub(names(pk_list), start = 1, end = -4)
pk_check <- cbind(df = str_sub(names(pk_list), start = 1, end = -4),
is_unique = lapply(pk_list, function(pk){if_else(count(pk)==nrow(pk),
TRUE,
FALSE)}),
is_na = lapply(pk_list, function(pk){any(is.na(pk))}),
is_empty_string = lapply(pk_list, function(pk){any(pk=="", na.rm = TRUE)})
)
pk_check <- as.data.frame(pk_check)
row.names(pk_check) <- NULL
pk_check
pk_check <- cbind(is_unique = lapply(pk_list, function(pk){if_else(count(pk)==nrow(pk),
TRUE,
FALSE)}),
is_na = lapply(pk_list, function(pk){any(is.na(pk))}),
is_empty_string = lapply(pk_list, function(pk){any(pk=="", na.rm = TRUE)})
)
pk_check <- as.data.frame(pk_check)
pk_check
pk_check %>% filter(is_unique == FALSE |is_na == TRUE |is_empty_string == TRUE)
nrow(invalid_pks) == 0
invalid_pks <- pk_check %>% filter(is_unique == FALSE |is_na == TRUE |is_empty_string == TRUE)
nrow(invalid_pks) == 0
check_primary_keys <- function(){
pk_list <- list(
"order_pk" = data_norm$order %>%
select(order_id),
"order_product_pk" = data_norm$order_product %>%
select(order_id,
product_id,
variation_id),
"order_coupon_pk" = data_norm$order_coupon %>%
select(everything()),
"product_pk" = data_norm$product %>%
select(product_id,
variation_id),
"product_fiber_pk" = data_norm$product_fiber %>%
select(everything()),
"product_yarn_weight_pk" = data_norm$product_yarn_weight %>%
select(everything()),
"product_effect_pk" = data_norm$product_effect %>%
select(everything()),
"product_usage_pk" = data_norm$product_usage %>%
select(everything()),
"customer_pk" = data_norm$customer %>%
select(customer_id),
"customer_usage_pk" = data_norm$customer_usage %>%
select(everything())
)
#
pk_check <- cbind(is_unique = lapply(pk_list, function(pk){if_else(count(pk)==nrow(pk),
TRUE,
FALSE)}),
is_na = lapply(pk_list, function(pk){any(is.na(pk))}),
is_empty_string = lapply(pk_list, function(pk){any(pk=="", na.rm = TRUE)})
)
pk_check <- as.data.frame(pk_check)
invalid_pks <- pk_check %>% filter(is_unique == FALSE |is_na == TRUE |is_empty_string == TRUE)
if_else(nrow(invalid_pks) == 0,
return(invalid_pks),
return("All primary keys are valid!"))
}
check_primary_keys()
pk_check
is_invalid_pk <- function(pk_list){
criteria_df <- as.data.frame(
cbind(is_unique = lapply(pk_list, function(pk){if_else(count(pk)==nrow(pk),
TRUE,
FALSE)}),
is_na = lapply(pk_list, function(pk){any(is.na(pk))}),
is_empty_string = lapply(pk_list, function(pk){any(pk=="", na.rm = TRUE)})
)
)
invalid <- criteria_df %>% filter(is_unique == FALSE |is_na == TRUE |is_empty_string == TRUE)
return(invalid_pks)
}
is_invalid_pk <- function(pk_list){
pk_list <- pk_list
criteria_df <- as.data.frame(
cbind(is_unique = lapply(pk_list, function(pk){if_else(count(pk)==nrow(pk),
TRUE,
FALSE)}),
is_na = lapply(pk_list, function(pk){any(is.na(pk))}),
is_empty_string = lapply(pk_list, function(pk){any(pk=="", na.rm = TRUE)})
)
)
invalid <- criteria_df %>% filter(is_unique == FALSE |is_na == TRUE |is_empty_string == TRUE)
return(invalid_pks)
}
is_invalid_pk()
is_invalid_pk <- function(pk_list){
pk_list <- pk_list
criteria_df <- as.data.frame(
cbind(is_unique = lapply(pk_list, function(pk){if_else(count(pk)==nrow(pk),
TRUE,
FALSE)}),
is_na = lapply(pk_list, function(pk){any(is.na(pk))}),
is_empty_string = lapply(pk_list, function(pk){any(pk=="", na.rm = TRUE)})
)
)
invalid <- criteria_df %>% filter(is_unique == FALSE |is_na == TRUE |is_empty_string == TRUE)
return(invalid_pks)
}
is_invalid_pk <- function(df_list){
pk_list <- df_list
criteria_df <- as.data.frame(
cbind(is_unique = lapply(pk_list, function(pk){if_else(count(pk)==nrow(pk),
TRUE,
FALSE)}),
is_na = lapply(pk_list, function(pk){any(is.na(pk))}),
is_empty_string = lapply(pk_list, function(pk){any(pk=="", na.rm = TRUE)})
)
)
invalid <- criteria_df %>% filter(is_unique == FALSE |is_na == TRUE |is_empty_string == TRUE)
return(invalid_pks)
}
is_invalid_pk()
is_invalid_pk <- function(x){
x <- pk_list
criteria_df <- as.data.frame(
cbind(is_unique = lapply(x, function(pk){if_else(count(pk)==nrow(pk),
TRUE,
FALSE)}),
is_na = lapply(x, function(pk){any(is.na(pk))}),
is_empty_string = lapply(x, function(pk){any(pk=="", na.rm = TRUE)})
)
)
invalid <- criteria_df %>% filter(is_unique == FALSE |is_na == TRUE |is_empty_string == TRUE)
return(invalid_pks)
}
is_invalid_pk()
is_invalid_pk <- function(x){
x <- pk_list
criteria_df <- as.data.frame(
cbind(is_unique = lapply(x, function(pk){if_else(count(pk)==nrow(pk),
TRUE,
FALSE)}),
is_na = lapply(x, function(pk){any(is.na(pk))}),
is_empty_string = lapply(x, function(pk){any(pk=="", na.rm = TRUE)})
)
)
invalid <- criteria_df %>% filter(is_unique == FALSE |is_na == TRUE |is_empty_string == TRUE)
return(invalid_pks)
}
is_invalid_pk()
keys
check_pk <- function(x){
x <- pk_list
criteria_df <- as.data.frame(
cbind(is_unique = lapply(x, function(pk){if_else(count(pk)==nrow(pk),
TRUE,
FALSE)}),
is_na = lapply(x, function(pk){any(is.na(pk))}),
is_empty_string = lapply(x, function(pk){any(pk=="", na.rm = TRUE)})
)
)
invalid <- criteria_df %>% filter(is_unique == FALSE |is_na == TRUE |is_empty_string == TRUE)
if(nrow(invalid) != 0){
result <- invalid
}else{result <- "All good!"}
return(result)
check_pk <- function(x){
x <- pk_list
criteria_df <- as.data.frame(
cbind(is_unique = lapply(x, function(pk){if_else(count(pk)==nrow(pk),
TRUE,
FALSE)}),
is_na = lapply(x, function(pk){any(is.na(pk))}),
is_empty_string = lapply(x, function(pk){any(pk=="", na.rm = TRUE)})
)
)
invalid <- criteria_df %>% filter(is_unique == FALSE |is_na == TRUE |is_empty_string == TRUE)
if(nrow(invalid) != 0){
result <- invalid
}else{result <- "All good!"}
return(result)
}
check_pk <- function(x){
x <- pk_list
criteria_df <- as.data.frame(
cbind(is_unique = lapply(x, function(pk){if_else(count(pk)==nrow(pk),
TRUE,
FALSE)}),
is_na = lapply(x, function(pk){any(is.na(pk))}),
is_empty_string = lapply(x, function(pk){any(pk=="", na.rm = TRUE)})
)
)
invalid <- criteria_df %>% filter(is_unique == FALSE |is_na == TRUE |is_empty_string == TRUE)
if(nrow(invalid) != 0){
result <- invalid
}else{result <- "All good!"}
return(result)
}
View(check_primary_keys)
View(check_primary_keys)
z
z
test
source('C:/Users/sjara/git/made-in-america-yarns/update_db.r', echo=TRUE)
source('C:/Users/sjara/git/made-in-america-yarns/update_db.r', echo=TRUE)
source('C:/Users/sjara/git/made-in-america-yarns/update_db.r', echo=TRUE)
