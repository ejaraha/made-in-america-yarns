order <- read.csv("C:\Users\sjara\Downloads\wc_order.csv")
order <- read.csv("C:/Users/sjara/Downloads/wc_order.csv")
glimpse(order)
head(order)
install.packages(tidyverse)
install.packages("tidyverse")
glimpse(order)
library(dplyr)
glimpse(order)
print("INVALID PRIMARY KEYS:\nyooo")
print("INVALID PRIMARY KEYS:/nyooo")
print("INVALID PRIMARY KEYS:/nyooo")
print("INVALID PRIMARY KEYS: /n yooo")
print("INVALID PRIMARY KEYS: \n yooo")
cat(print("INVALID PRIMARY KEYS: \n yooo"))
cat("INVALID PRIMARY KEYS: \n yooo")
cat("INVALID PRIMARY KEYS: \n the following dataframes have invalid primary keys")
library(dplyr)
library(tidyr)
library(lubridate)
library(stringr)
library(purrr)
source("C:/Users/sjara/git/made-in-america-yarns/functions.R")
setwd("C:/Users/sjara/git/made-in-america-yarns/data")
# update & normalize database
#-------------------------------------------------------------
data <- normalize(update_db())
# normalize data
#-------------------------------------------------------------
library(dplyr)
library(tidyr)
library(lubridate)
library(stringr)
library(purrr)
source("C:/Users/sjara/git/made-in-america-yarns/functions.R")
setwd("C:/Users/sjara/git/made-in-america-yarns/data")
# update & normalize database
#-------------------------------------------------------------
data <- normalize(update_db())
# normalize data
#-------------------------------------------------------------
library(dplyr)
library(tidyr)
library(lubridate)
library(stringr)
library(purrr)
source("C:/Users/sjara/git/made-in-america-yarns/functions.R")
setwd("C:/Users/sjara/git/made-in-america-yarns/data")
# update & normalize database
#-------------------------------------------------------------
data <- normalize(update_db())
# normalize data
#-------------------------------------------------------------
pk_list <- data#df_list
invalid <- pk_check %>%
filter(is_unique == FALSE |is_na == TRUE |is_empty_string == TRUE)
pk_check <- as.data.frame(
cbind(is_unique = lapply(pk_list, function(pk){if_else(count(pk)==nrow(pk),
# unique if the # rows matches the # unique rows
TRUE,
FALSE)}),
is_na = lapply(pk_list, function(pk){any(is.na(pk))}),
is_empty_string = lapply(pk_list, function(pk){any(pk=="", na.rm = TRUE)})))
# [2] create a data frame of only invalid primary keys
invalid <- pk_check %>%
filter(is_unique == FALSE |is_na == TRUE |is_empty_string == TRUE)
View(normalize)
library(dplyr)
library(tidyr)
library(lubridate)
library(stringr)
library(purrr)
source("C:/Users/sjara/git/made-in-america-yarns/functions.R")
setwd("C:/Users/sjara/git/made-in-america-yarns/data")
# update & normalize database
#-------------------------------------------------------------
data <- normalize(update_db())
# normalize data
#-------------------------------------------------------------
update_db()
update_db()
update_db <- function(data){
# import all data (_raw.csv, _cols.csv, _main.csv)
#--------------------------------------------------------------
data <- import_data() %>% sort_cols()
print("poop")
# drop unnecessary fields from raw data (_raw_drop.csv)
#--------------------------------------------------------------
## add the _raw_drop files to the data list
data <- append(data, drop_cols())
# update main data with clear, most recent data (_main.csv <- update(_main.csv + _raw_drop.csv))
#--------------------------------------------------------------
## update matching rows from order_main to match order
## & insert non-matching ids from order_raw_drop into order_main
data$order_main <- rows_upsert(data$order_main, data$order_raw_drop, by="order_id")
## update matching rows from product_main to match product
## & insert non-matching rows from product_raw_drop to product_main
data$product_main <- rows_upsert(data$product_main,data$product_raw_drop, by="id")
## update matching rows from role_main to match role
## & insert non-matching rows from role_raw_drop to role_main
data$role_main <- rows_upsert(data$role_main, data$role_raw_drop, by="id")
return(data)
}
update_db()
# update database
#-------------------------------------------------------------
update_db <- function(data){
# import all data (_raw.csv, _cols.csv, _main.csv)
#--------------------------------------------------------------
data <- import_data() %>% sort_cols()
# drop unnecessary fields from raw data (_raw_drop.csv)
#--------------------------------------------------------------
## add the _raw_drop files to the data list
data <- append(data, drop_cols())
print("poop")
# update main data with clear, most recent data (_main.csv <- update(_main.csv + _raw_drop.csv))
#--------------------------------------------------------------
## update matching rows from order_main to match order
## & insert non-matching ids from order_raw_drop into order_main
data$order_main <- rows_upsert(data$order_main, data$order_raw_drop, by="order_id")
## update matching rows from product_main to match product
## & insert non-matching rows from product_raw_drop to product_main
data$product_main <- rows_upsert(data$product_main,data$product_raw_drop, by="id")
## update matching rows from role_main to match role
## & insert non-matching rows from role_raw_drop to role_main
data$role_main <- rows_upsert(data$role_main, data$role_raw_drop, by="id")
return(data)
}
check_empty <- function(df){
#checks every column in df for NAs and ""
df <- data.frame("any_nas" = apply(df, 2, function(df) any(is.na(df))),
"any_empty_character_vectors" = apply(df, 2, function(df) any(df == "", na.rm = TRUE)))
return(df)
update_db()
# update database
#-------------------------------------------------------------
update_db <- function(data){
# import all data (_raw.csv, _cols.csv, _main.csv)
#--------------------------------------------------------------
data <- import_data() %>% sort_cols()
# drop unnecessary fields from raw data (_raw_drop.csv)
#--------------------------------------------------------------
## add the _raw_drop files to the data list
data <- append(data, drop_cols())
print("poop")
# update main data with clear, most recent data (_main.csv <- update(_main.csv + _raw_drop.csv))
#--------------------------------------------------------------
## update matching rows from order_main to match order
## & insert non-matching ids from order_raw_drop into order_main
data$order_main <- rows_upsert(data$order_main, data$order_raw_drop, by="order_id")
## update matching rows from product_main to match product
## & insert non-matching rows from product_raw_drop to product_main
data$product_main <- rows_upsert(data$product_main,data$product_raw_drop, by="id")
## update matching rows from role_main to match role
## & insert non-matching rows from role_raw_drop to role_main
data$role_main <- rows_upsert(data$role_main, data$role_raw_drop, by="id")
return(data)
}
check_empty <- function(df){
#checks every column in df for NAs and ""
df <- data.frame("any_nas" = apply(df, 2, function(df) any(is.na(df))),
"any_empty_character_vectors" = apply(df, 2, function(df) any(df == "", na.rm = TRUE)))
return(df)
}
# update database
#-------------------------------------------------------------
update_db <- function(data){
# import all data (_raw.csv, _cols.csv, _main.csv)
#--------------------------------------------------------------
data <- import_data() %>% sort_cols()
# drop unnecessary fields from raw data (_raw_drop.csv)
#--------------------------------------------------------------
## add the _raw_drop files to the data list
data <- append(data, drop_cols())
print("poop")
# update main data with clear, most recent data (_main.csv <- update(_main.csv + _raw_drop.csv))
#--------------------------------------------------------------
## update matching rows from order_main to match order
## & insert non-matching ids from order_raw_drop into order_main
data$order_main <- rows_upsert(data$order_main, data$order_raw_drop, by="order_id")
## update matching rows from product_main to match product
## & insert non-matching rows from product_raw_drop to product_main
data$product_main <- rows_upsert(data$product_main,data$product_raw_drop, by="id")
## update matching rows from role_main to match role
## & insert non-matching rows from role_raw_drop to role_main
data$role_main <- rows_upsert(data$role_main, data$role_raw_drop, by="id")
return(data)
}
check_empty <- function(df){
#checks every column in df for NAs and ""
df <- data.frame("any_nas" = apply(df, 2, function(df) any(is.na(df))),
"any_empty_character_vectors" = apply(df, 2, function(df) any(df == "", na.rm = TRUE)))
return(df)
}
